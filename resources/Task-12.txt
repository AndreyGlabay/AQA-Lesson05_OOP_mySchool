За прикладом, що був на лекції, створити сет тестових методів для тестування Вашої предметної області.
Бажано додати цей код та pom.xml до "довгої" домашної роботи, чи можна зробити у окремому проекті.
Варіанті завдань (Andriy Glabay):
- Parallel = test;
- BeforeAfter = suite,case;
- Groups = 4;

(1) Кількість тестових класів - мінімум 3, кількість тестових методів - мінімум 5 в кожному класі.

(1.1) Кожен тестовий чи Before/After метод мусить виводити на stdout інформацію про себе:
- (a) як зветься;
- (b) до якого класу належить;
- (c) у якому треді виконується.

(2) Зробити testng.xml з 2 тестами.
(2.1) Розподілити тестові класи між цими двома тестами.
(2.2) Імплементувати паралелізм на рівні згідно завдання (поле Parallel),
(2.3) дослідити поведінку системи у випадку різних значень parallel:
- (a) classes;
- (b) instances;
- (c) methods;
- (d) true.

(3) Імплементувати методи, анотовані @Before... / @After, згідно завдання (поле BeforeAfter = suite, class).

(4) Імплементувати функциональність згідно варианту (поле Groups):
- (a) Запуск тестових методів, які належать до кількох груп
- (b) Запуск тестових методів, які належать до кількох груп
- (c) Забезпечити, щоб певні групи тестових методів були запущені в певному порядку
- (d) Забезпечити, щоб певну групи тестових методів було запущено лише в тому випадку, якщо інша група тестових методів
      була запущена успішно.

------------------------------------------------------------------------------------------------------------------------

(0.a) Створив pom.xml файл
(0.b) Додав з Maven репозіторію залежності відносно TestNG
(0.c) Реорганізував структуру проекту:
      - додавши мануально діректорії "main/java" та "test/java";
      - У "test/java" додав пекедж "com.example.school.tests";
      - ствлорив у ньому java-класс "MainTests";
      - переніс існуючи java-класи до "main/java";
      - відновив POM-файл: додав тег "<build>";
      - pom.xml -> переімпортував Maven.
(0.d) Додав до проекту TestNG plugin.

(1)
- (a) Заімплементував зразки 2 тестих методів у тестовому класі MainTests;
- (b) Створив тестовий клас "ObjectDataTests" + заімплементував 5 тестових методів з перевіркою даних з джерела;
- (c) Створив тестовий клас "PriorityTests" + заімплементував 5 тестових методів з різним пріоритетом;
- (d) додав ще 3 тестових метода до тестового класу Main - взагалі щоб було 5 тестових методів у класі;
- (e) додав Before/After test methods до всіх тестових класів;
- (f) модіфікував Before/After test methods у всіх 3/3 тестових класів у
      Before/After Suite, та Before/After Class - відповідно до свого варіанту завдання;

(1.1) У всіх 3/3 тестових класах, у кожному Test та Before/After методі заімплементував вивід до stdout інфо про себе:
- (a) Назву Test та Before/After методу (у класі MainTests назва береться з дескріпшену, у інших - прописана як стрінг);
- (b) Клас, до якого належить Test та Before/After методи;
- (c) Тред, у якому виконуються Test та Before/After методи;
- (d) Деяку додаткову інформацію на власний погляд (наприклад, пріоритет з атрібутів у тест-класі PriorityTests).

(2) Зробив testng.xml з 2 тестами.
(2.1) Розподілив тестові класи між цими двома тестами:
      * TestCase1: MainTests; ObjectDataTests;
      * TestCase2: PriorityTests.
(2.2) Заімплементував у тегу <Suite> паралелізм на рівні згідно завдання (Parallel = test),
(2.3) дослідив поведінку системи у випадку різних значень parallel:
- (a) classes -> суттєвості класу виконуються у різних потоках;
- (b) instances -> усі тестові методи у testng.xml "1stTest" виконуються в одному потоці, у у testng.xml "2твTest" - в іншому;
- (c) methods -> суттєвості методу виконуються у різних потоках;
- (d) true -> суттєвості методу виконуються у різних потоках.

(3) Методи, анотовані @Before... / @After, згідно завдання (поле BeforeAfter = suite, class) - вже були імплементовані
    у кроці (1.e) та (1.f).

(4) Заімплементував до атрибутів кожного Test/Before/After- методу ім'я групи:
    - Загалом створів 4 групи (поле Groups = 4):
      * group0 : до цієї групи входять усі Before/After методи з усіх 3-ох класів: MainTests, ObjectDataTests, PriorityTests;
      * group1 : до цієї групи входять усі Test методи з 2-ох класів: MainTests, ObjectDataTests
      * groupA : до цієї групи входять Test методи 'A' з класу PriorityTests:  test_A1(), test_A2();
      * groupB : до цієї групи входять Test методи 'B' з класу PriorityTests:  test_B1(), test_B2(), test_B3();

- (a) У testng.xml зробив запуск тестових методів, які належать до кількох груп за допомогою тегів:
      <groups>
         <run>
            <include name = "...">

- (b) У testng.xml зробив пропуск тестових методів, які належать до кількох груп (а саме: group1 та groupB) за
      допомогою тегів:
      <groups>
         <run>
            <exclude name = "...">

- (c) У testng.xml забезпечив, щоб певні групи тестових методів (groupB -> PriorityTests:: Name: test_B1/2/3)
      були запущені в певному порядку - перед іншой групой тестових методів (groupA -> PriorityTests:: Name: test_A1/2),
      незважаючи на пріоритет, реалізований на рівні тестових методів. Було реалізовано за допомогою тегів:
      <groups>
         <dependencies>
            <group name = "..." depends-on = "...">

- (d) Насамперед, для цього степу додав ще 4 тестових метода до тест-класу "PriorityTests" та помыстив їх до "groupС".
      У testng.xml забезпечив, щоб певну групу тестових методів (groupС -> PriorityTests:: Name: test_С1/2/3/4)
      було запущено лише в тому випадку, якщо інша група тестових методів (group1 -> "MainTests" та "ObjectDataTests")
      була запущена успішно. Логіка у тому, що у "group1" є спеціально 2 негативних теста, тобто "group1" не повинна
      цілком бути зеленою - завжди 2 фейла. Саме тому тести з групи "groupС" не виконуються: на stdout немає тестів
      PriorityTests:: Name: test_С1/2/3/4, а у скопі тестс ран = 30, замість 34. Було реалізовано за допомогою тегів:
      <groups>
         <dependencies>
            <group name = "..." depends-on = "...">
