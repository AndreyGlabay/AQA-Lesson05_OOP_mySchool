TASK-14 (Part 1)
LOGGING AND MOCKING

PARAMETERS:
- configName =  CONFIG_FILENAME
- consoleLevel = CONFIG
- fileLevel = CONFIG
- fileSize = 39250
- numFiles = 3
- httpHeader = authorization: Basic
- httpResponseCode = 114
- httpResponseDelay = 3731


(1) Логування

(1.1) За прикладом з лекції (HJAQALesson22), взявши за початкову модель класи із д/з №№ 7, 8 або 9 та метод main(),
      що робить обʼєкти із форматованого текстового файлу, імплементувати логування за допомогою java.util.logging.

      Лог мусить містити наступні записи:

      - (a) маркер початку процесу із іменем файлу, що зчитується (рівень CONFIG)
      - (b) маркер завершення процесу із кількістю імпортованих файлів (рівень CONFIG)
      - (c) запис створення кожного обʼєкту, кожен тип обʼєкту - власним рівнем, починаючи з верхнього (SEVERE, крім CONFIG)
      - (d) Імʼя конфігураційного файла передавати за допомогою змінної оточення згідно поля configName.

(1.2) Імплементувати виведення логів на консоль та у файл, мінімальний рівень, що виводиться - згідно
      полей consoleLevel та fileLevel відповідньо.

(1.3) Імплементувати ротацію файлів логу, розмір файла та кількість файлів - поля fileSize та numFiles відповідньо.



(2) Мокінг

(2.1) За прикладом з лекції (HJAQALesson23) створити тестовий клас, що використовує мок-сервіс за допомогою WireMock.

(2.2) Використати метод urlEqualTo() для матчингу URL, що викликається. URL вигадати самостійно.

(2.3) Матчити хедер HTTP реквесту згідно з завданням, поле httpHeader.

(2.4) Повертати HTTP код та робити затримку відповіді згідно з завданням: поля httpResponseCode та httpResponseDelay,
      відповідньо.

(2.5) Асертити код респонса та довжину затримки.

-----------------------------------------------------------------------------------------------------------------------
(1) ЛОГУВАННЯ

(1.0) За початкову модель обрав класи із Д/З №9 "Java Collections and Streams": перейшов до гілки цього Д/З "scanner" -
      та зробив нову гілку "logging", видалив старі коментарі з описом виконання завдання.

(1.1) У класі Main імплементував логування за допомогою java.util.loggin: Створив у статичному контексті змінну "logger";
      У методі main():
      - ініціював змінну "logger";
      - Встановив рівень логування = CONFIG до маркерів початку та завершення.

(1.1.a) Зробив маркер початку процесу (запису даних до змінної "logger") із іменем файлу, що зчитується (рівень CONFIG).

(1.1.b) Зробив маркер завершення процесу із кількістю імпортованих файлів (рівень CONFIG).

(1.1.c) Заімплементував логгінг для кожного типу об'єкту використовуючи різні рівні логування (пропускаючи CONFIG):
        - для типу "PM"   - Рівень логування = SEVERE;
        - для типу "Dev"  - Рівень логування = WARNING;
        - для типу "UIUX" - Рівень логування = INFO;
        - для типу "QA"   - Рівень логування = FINE.

(1.1.d) Заімплементував змінну оточення: key = CONFIG_FILENAME; value = resources/logging.properties.
        Імплементував передачу імʼя конфіг файла за допомогою змінної оточення: System.setProperty("_", System.getenv("_"));

(1.2) У файлі "logging.properties": імплементував виведення логів на консоль та у файл,
      мінімальний рівень, що виводиться - згідноi полей:
      - consoleLevel = CONFIG
      - fileLevel = CONFIG

(1.3) У файлі "logging.properties": імплементував ротацію файлів логу, розмір файла та кількість файлів - поля:
      - fileSize = 39250
      - numFiles = 3

-----------------------

(2) МОКІНГ

Будь ласка див. окремий проект:   https://github.com/AndreyGlabay/AQA-Lesson_Mocking/