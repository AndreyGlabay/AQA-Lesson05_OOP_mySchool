За прикладом з лекції, використовуючи API, що описане за адресою https://fakerestapi.azurewebsites.net/index.html

(1) Зробити API тести для сутності згідно із варіантом:
    - Variant = Author;

(2) Імплементувати 3 тести на різні методи HTTP.

(2.1) 2 тести зробити за допомогою Jackson,
(2.2) один - з використанням JSONObject.

(3) У кожному тесті мусить бути принаймні один Asserion.

--------------------------------------------------------------------------------------------------------------------

(1)
- (a) У пакеті test/java/com.example.school.tests - створив новий пакет "api";
- (b) У пакеті "/api" створив новий java клас "FakeRESTApi"
- (c) За адресою https://fakerestapi.azurewebsites.net/index.html обрав сутність "Authors" -> метод GET -> Copy URL ->
      -> у тестовому класі "FakeRESTApi" зробив змінну "apiUrl" типу "String", як значення помістив до неї скопійований URL;
- (d) у тестовому класі "FakeRESTApi" зробив тестовий метод "authors()";
- (e) на рівні тестового методу: зробив змінну "endpointName", та помістив до неї ендпоінт згідно із завданням;
- (f) на рівні тестового методу: зробив змінну "url" яка скаладається з апі та ендпоінту;
- (g) До pom.xml імплементував залежність через Мавен для імплементації біблиотеки OkHTTP3, та зробив ре-білд Мавен;
- (h) на рівні тестового класу: імплементував новий об'єкт - инстанс класу OkHTTPClient;
- (i) на рівні тестового методу: створив новий об'єкт для виконання реквесту, використовуючи білдер;
- (j) на рівні тестового методу: створив можливість для виконання тесту за допомогою TRY-CATCH;
- (k) на рівні тестового методу: створив змінну та ассершн для перевірки статус-коду і тіла відповіді;
- (k.1) додав Method invocation 'string' may produce 'NullPointerException' за радою IDEA;
- (l) У пакеті "com.example.school.tests.api" зробив новий пакет "dto"
- (m) У пакеті "dto" зробив новий java клас "Authors", щоб зробити ДТО для сутності "Authors-GET-scheme";
- (n) На рівні тестового класу "Authors" заімплементував 4 змінних відносно з "Authors-GET-scheme";
- (o) До pom.xml імплементував залежність через Мавен JSON Object бібліотеки, та зробив ре-білд Мавен;
- (p) До pom.xml імплементував залежність через Мавен Jackson-core, -databind, -annotations бібліотеки, та зробив ре-білд;
- (q) Class Authors: використовуючи Jackson, анатував "поля-змінні" як "@JsonProperty", додав аксессори та toString;
- (r) Class "FakeRESTApi"/method "authors()"/block "try": зробив змінну для маппінга;
- (s) Class "FakeRESTApi"/method "authors()"/block "try": зробив парсінг DTO;
- (t) Class "FakeRESTApi"/method "authors()"/block "try": зховав у коменти змінну та ассершн який перевіряє наявність даних
      у респонс боді - тому що виникає конфлікт, коли далі я намагаюсь парсити респонс боді, а цей стрім вже використовувався
      та був зачинен (залишев як нагадування що до такої ішью у майбутньому);


(2) Class "FakeRESTApi":
- Зробив 1-й тестовий метод "authors()"  - зроблено у step 1.d - за допомогою Jackson;
- Зробив 2-й тестовий метод "authorsPost()" - поки пустий - буде використовувати Jackson;
- Зробив 3-й тестовий метод "authorsDelete()" - поки пустий - буде використовувати JsonObject;


(2.1)
- (a) У пакеті "dto" зробив новий java клас "AuthorsPost", щоб зробити ДТО для сутності "Authors-POST-scheme";
- (b) На рівні тестового класу "AuthorsPost" заімплементував 4 змінних відносно з "Authors-POST-scheme";
- (c) Class AuthorsPost: використовуючи Jackson, анатував "поля-змінні" як "@JsonProperty", додав аксессори та toString;
- (d) На рівні тестового методу "authorsPost()": зробив змінну "endpointName", та помістив до неї ендпоінт згідно із завданням;
- (e) На рівні тестового методу "authorsPost()": зробив змінну "url" яка скаладається з апі та ендпоінту;
- (f) На рівні тестового методу "authorsPost()": створив ObjectMapper щоб перетворити Java code у JSON;
- (g) На рівні тестового методу "authorsPost()": створив новий Об'єкт "id100500" - примірник класу AuthorsPost;
- (h) На рівні тестового методу "authorsPost()": перетворив Об'єкт "id100500" на байт-код;
- (i) На рівні тестового методу "authorsPost()": створив новий POST реквест;
- (j) На рівні тестового методу "authorsPost()": виконав POST реквест;


(2.2)
- (a) На рівні тестового методу "authorsDelete()": зробив змінну "endpointName", та помістив до неї ендпоінт;
- (b) На рівні тестового методу "authorsDelete()": зробив змінну "url" яка скаладається з апі та ендпоінту;
- (c) На рівні тестового методу "authorsDelete()": зробив змінну "jsonRequestBody" з "пустим" значенням "";
- (d) На рівні тестового методу "authorsDelete()": створив новий DELETE реквест;
- (e) На рівні тестового методу "authorsDelete()": виконав DELETE реквест;


(3) У кожному тесті перевірив чи додав Asserions:

  (3.1) @Test (testName = "TestCase1_Jackson"):
- (a) Перевірив що response code = 200 (згідно зі сваггером);
- (b) Перевірив що response body містить занчення "42";
- (c) Перевірив що response body містить занчення "Last Name 277";

  (3.2) @Test (testName = "TestCase2_Jackson"):
- (a) Перевірив що response code = 200 (згідно зі сваггером);
- (b) Перевірив що серед response headers є хедер "content-type";
- (c) Перевірив що серед response headers хедер "server" має занчення "Kestrel";

  (3.3) @Test (testName = "TestCase3_JsonObject"):
- (a) Перевірив що response code = 200 (згідно зі сваггером);
- (b) Перевірив що response message = "OK" (згідно із DevTool);
- (c) Перевірив що серед response headers хедер "content-length" має занчення "0";

------------------------------------------------------------------------------------------------------------------------
(ADDITIONAL)

(4) pom.xml: т.к. ми маємо 3 залежності від Jackson (core, databind, annotations) - то номер версії переносимо до
    пропертіес, тому що у разі подальшого розвитку проекту, і перехіду до нової версії Jackson легко можно забути
    змынити версыю у всіх трьох залежностях.

(5) DTO: Authors та AuthorsPost: додав до змінних модіффкатор доступу "private", щоб поля не стирчали зовні.

(6)
- (a) Test Class "FakeRESTApi": додав до анотацій тестових методів атрибут "priority" (згодом видалив),
      та призначив до однієї групи "group_Api";
- (b) testng.xml: забезпечив тест ран тільки групи з API тестами, а тести з інших груп скіпнув.
- (c) testng.xml: пріоритети на рівні тестових аннотацій не допомогли з-за використання паралелизму виконання тестів,
      отже додав залежності між тестовими групами на рівнві testng.xml за допомогою тегу <dependencies>.
- (d) testng.xml: видалив усе зайве, що залишалось з попереднього завдання.

(7) Test Class "FakeRESTApi": перейменував клас відповідно regex у "FakeRestApiTests"

(8) Test Class "FakeRestApiTests", all 3 of 3 test methods: у блоках TRY-CATCH змінив "throw new IOException(e)"
    на "Assert.fail(e.toString())".
------------------------------------------------------------------------------------------------------------------------
(ADDITIONAL-ADDITIONAL)

(9) Оновив зміст файлу .gitignore.

(10) Test Class "FakeRestApiTests" / test method "authors()": (L52) змiнив  "System.out.println("Response Body: " + authors);",
     який виводив лише посилання на масив -> на -> "System.out.println("Response Body: " + Arrays.toString(authors));",
     що виведе зміст масиву.

(11) Test Class "FakeRestApiTests" / test method "authorsPost()": (L88) змінив місцями "MediaType.parse("application/json")"
     та "requestBodyBytes" -> ".post(RequestBody.create(requestBodyBytes, MediaType.parse("application/json")))",
     тому що у новій імплементації методу параметри помінялись місцями: (byte, MediaType).
