За прикладом з лекції, використовуючи API, що описане за адресою https://fakerestapi.azurewebsites.net/index.html

(1) Зробити API тести для сутності згідно із варіантом:
    - Variant = Author;

(2) Імплементувати 3 тести на різні методи HTTP.

(2.1) 2 тести зробити за допомогою Jackson,
(2.2) один - з використанням JSONObject.

(3) У кожному тесті мусить бути принаймні один Asserion.


--------------------------------------------------------------------------------------------------------------------

(1)
- (a) У пакеті test/java/com.example.school.tests - створив новий пакет "api";
- (b) У пакеті "/api" створив новий java клас "FakeRESTApi"
- (c) За адресою https://fakerestapi.azurewebsites.net/index.html обрав сутність "Authors" -> метод GET -> Copy URL ->
      -> у тестовому класі "FakeRESTApi" зробив змінну "apiUrl" типу "String", як значення помістив до неї скопійований URL;
- (d) у тестовому класі "FakeRESTApi" зробив тестовий метод "authors()";
- (e) на рівні тестового методу: зробив змінну "endpointName", та помістив до неї ендпоінт згідно із завданням;
- (f) на рівні тестового методу: зробив змінну "url" яка скаладається з апі та ендпоінту;
- (g) До pom.xml імплементував залежність через Мавен для імплементації біблиотеки OkHTTP3, та зробив ре-білд Мавен;
- (h) на рівні тестового класу: імплементував новий об'єкт - инстанс класу OkHTTPClient;
- (i) на рівні тестового методу: створив новий об'єкт для виконання реквесту, використовуючи білдер;
- (j) на рівні тестового методу: створив можливість для виконання тесту за допомогою TRY-CATCH;
- (k) на рівні тестового методу: створив змінну та ассершн для перевірки статус-коду і тіла відповіді;
- (k.1) додав Method invocation 'string' may produce 'NullPointerException' за радою IDEA;
- (l) У пакеті "com.example.school.tests.api" зробив новий пакет "dto"
- (m) У пакеті "dto" зробив новий java клас "Authors", щоб зробити ДТО для сутності "Authors-GET-scheme";
- (n) На рівні тестового класу "Authors" заімплементував 4 змінних відносно з "Authors-GET-scheme";
- (o) До pom.xml імплементував залежність через Мавен JSON Object бібліотеки, та зробив ре-білд Мавен;
- (p) До pom.xml імплементував залежність через Мавен Jackson-core, -databind, -annotations бібліотеки, та зробив ре-білд;
- (q) Class Authors: використовуючи Jackson, анатував "поля-змінні" як "@JsonProperty", додав аксессори та toString;
- (r) Class "FakeRESTApi"/method "authors()"/block "try": зробив змінну для маппінга;
- (s) Class "FakeRESTApi"/method "authors()"/block "try": зробив парсінг DTO;
- (t) Class "FakeRESTApi"/method "authors()"/block "try": зховав у коменти змінну та ассершн який перевіряє наявність даних
      у респонс боді - тому що виникає конфлікт, коли далі я намагаюсь парсити респонс боді, а цей стрім вже використовувався
      та був зачинен (залишев як нагадування що до такої ішью у майбутньому);

(2) Class "FakeRESTApi":
- Зробив 1-й тестовий метод "authors()"  - зроблено у step 1.d - за допомогою Jackson;
- Зробив 2-й тестовий метод "authorsPost()" - поки пустий - буде використовувати Jackson;
- Зробив 3-й тестовий метод "authorsDelete()" - поки пустий - буде використовувати Jackson;

(2.1)
- (a) У пакеті "dto" зробив новий java клас "AuthorsPost", щоб зробити ДТО для сутності "Authors-POST-scheme";
- (b) На рівні тестового класу "AuthorsPost" заімплементував 4 змінних відносно з "Authors-POST-scheme";
- (c) Class AuthorsPost: використовуючи Jackson, анатував "поля-змінні" як "@JsonProperty", додав аксессори та toString;
- (d) на рівні тестового методу: зробив змінну "endpointName", та помістив до неї ендпоінт згідно із завданням;
- (e) на рівні тестового методу: зробив змінну "url" яка скаладається з апі та ендпоінту;
- (f) Class "FakeRESTApi"/method "authorsPost()": створив ObjectMapper щоб перетворити Java code у JSON;
- (g) Class "FakeRESTApi"/method "authorsPost()": створив новий Об'єкт "id100500" - примірник класу AuthorsPost;
- (h) Class "FakeRESTApi"/method "authorsPost()": перетворив Об'єкт "id100500" на байт-код;
- (i) Class "FakeRESTApi"/method "authorsPost()": створив новий POST реквест;
- (j) Class "FakeRESTApi"/method "authorsPost()": виконав POST реквест;

Class 'FakeRESTApi'/method 'authorsPost()':

....................................................
(2.2)
- (a) У пакеті "dto" зробив новий java клас "AuthorsDelete", щоб зробити ДТО для сутності "Authors-DELETE-scheme";
- (b) На рівні тестового класу "AuthorsDelete" заімплементував 4 змінних відносно з "Authors-DELETE-scheme";
- (c)
- (d)
- (e)
- (f)
- (g)
- (h)

....................................................

(3.1)
- (a)
- (b)
- (c)

(3.2)
- (a)
- (b)
- (c)

(3.3)
- (a)
- (b)
- (c)





