За прикладом з лекції, використовуючи API, що описане за адресою https://fakerestapi.azurewebsites.net/index.html

(1) Зробити API тести для сутності згідно із варіантом:
    - Variant = Author;

(2) Імплементувати 3 тести на різні методи HTTP.

(3) У кожному тесті мусить бути принаймні один Asserion.
- (a) 2 тести зробити за допомогою Jackson,
- (b) один - з використанням JSONObject.

--------------------------------------------------------------------------------------------------------------------

(1)
- (a) У пакеті test/java/com.example.school.tests - створив новий пакет "api";
- (b) У пакеті "/api" створив новий java клас "FakeRESTApi"
- (c) За адресою https://fakerestapi.azurewebsites.net/index.html обрав сутність "Authors" -> метод GET -> Copy URL ->
      -> у тестовому класі "FakeRESTApi" зробив змінну "apiUrl" типу "String", як значення помістив до неї скопійований URL;
- (d) у тестовому класі "FakeRESTApi" зробив тестовий метод "authors()";
- (e) на рівні тестового методу: зробив змінну "endpointName", та помістив до неї ендпоінт згідно із завданням;
- (f) на рівні тестового методу: зробив змінну "url" яка скаладається з апі та ендпоінту;
- (g) До pom.xml імплементував залежність через Мавен для імплементації біблиотеки OkHTTP3, та зробив ре-білд Мавен;
- (h) на рівні тестового класу: імплементував новий об'єкт - инстанс класу OkHTTPClient;
- (i) на рівні тестового методу: створив новий об'єкт для виконання реквесту, використовуючи білдер;
- (j) на рівні тестового методу: створив можливість для виконання тесту за допомогою TRY-CATCH;
- (k) на рівні тестового методу: створив змінну та ассершн для перевірки статус-коду і тіла відповіді;
- (k.1) додав Method invocation 'string' may produce 'NullPointerException' за радою IDEA;
- (l) У пакеті "com.example.school.tests.api" зробив новий пакет "dto"
- (m) У пакеті "dto" зробив новий java клас "Authors", щоб зробыти ДТО для сутності "Authors";
- (n) На рівні тестового класу "Authors" заімплементував 4 змінних відносно з Authors - GET -JSON scheme;
- (o) До pom.xml імплементував залежність через Мавен JSON Object бібліотеки, та зробив ре-білд Мавен;
- (p) До pom.xml імплементував залежність через Мавен Jackson-core, -databind, -annotations бібліотеки, та зробив ре-білд;




