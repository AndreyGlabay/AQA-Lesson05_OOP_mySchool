Використовуючи минуле домашнє завдання:

(1) Визначити тривалість виконання операцій. Вивести отримані дані із описами у порядку збільшення.
    (1.a) Імпорт даних із файлу
    (1.b) Обробка даних та створення обʼєктів
    (1.c) Три дії з потоками (загальний час)

(2) Зробити два обʼєкти типу Data (день + час), що
    (2.а) відповідають датам: до 1 грудня 2023, після 1 лютого 2024.
    (2.b) Визначити різницю між цими датами у днях та вивести із описом.

-----------------------------------------------------------------------------------------------------------------
(1)
- Заімпортував "java.util.Date" package для роботи з об'єктами типу "Date" (L20);

(1.а)
- Знайшов у існуючому коді момент імпорту даних з CSV-файлу:  String[] data = readFileUsingScanner(FILE_NAME);
- Перед цім моментом (рядком коду) заімплементував змінну "startImport";
- Після цього моменту (рядком коду) заімплементував змінну "finishImport";
- Одразу після "finishImport" - заімплементував "durationImport" = різниці між двома моментами;
- Зробив вивід "durationImport" до консолі.

(1.b.1)
- Знайшов у існуючому коді момент створення об'ектів: createStudentObjects(data, students);
- Перед цім моментом (рядком коду) заімплементував змінну "startCreation";
- Одразу після створення об'єктів заімплементував "durationCreation" = різниці між двома моментами;
- Зробив вивід "durationCreation" до консолі.

(1.b.2)
- Знайшов у існуючому коді деякі моменти обробки даних:
     System.out.println("STUDENTS: " + students);
     System.out.println("TOTAL: " + students.size());
- Перед ціми моментами заімплементував змінну "startProcessing";
- Одразу після обробки даних заімплементував "durationProcessing" = різниці між двома моментами;
- Зробив вивід "durationProcessing" до консолі.

(1.c)
- Знайшов у існуючому коді момент створення стрімів: Stream<Student> pmStream = pmStack.stream(); ...
- Перед цім моментом заімплементував змінну "startStreams";
- Після трьох дій із стримами (Sorting, Filtering та Mapping) заімплементував "durationStreams" = різниці між двома моментами;
- Зробив вивід "durationStreams" до консолі.

(1.d)
- Згрупував три виводу до консоли з кроків (1.a), (1.b.1), (1.b.2), (1.c) в одному місці - один поряд з іншим;

(1.e)
- Заімпортував "java.util.TreeMap" package для роботи з об'єктами типу "Date" (L21);
- Створив  TreeMap "durationMap" для сортування часу у порядку збільшення:
   duration - це буде KEY;
   message - це буде VALUE;
- TreeMap із замовченням відсортує KEYs у порядку збільшення;
- За допомогою циклу проходимо кожен елемент у мапі, та виводимо до консолі кожну пару KEY-VALUE відповідно до паттерну
  message + '=' + duration + " ms;"



(2)
- Створив об'єкт типу "Date" (дата+час) до 1-Dec-2023 = before 123-11-1 = 123-10-30 (30-Nov-2023, 13:12:11);
- Створив об'єкт типу "Date" (дата+час) після 1-Feb-2024 = after 1-Feb-2024 = after 124-1-1 = 123-1-2 (2-Feb-2024, 12:24:55);

(2.а)
- Перевірив із допомогою методу "date.before()", що перша дата є до 1 грудня 2023;
- Перевірив із допомогою методу "date.after()", що друга дата є після 1 лютого 2024.

(2.b)
- Порівняв дві дати, щоб визначити яка є більшою (щоб у майбутньому з більшої вичитати меншу -   не дуже практично
  у даному випадку,   але колись якщо реалізувати таку фунціональность це може стати у нагоді на разі автоматизації);
- Почислив різницю поміж датами у мілісекундах;
- До консолі вивів різницю з перерахунком з мілісекунд до діб.


